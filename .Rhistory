sample_station$spi3 <- spi(sample_station$Prec., 3)$fitted
sample_station$spi6 <- spi(sample_station$Prec., 6)$fitted
sample_station$spi12 <- spi(sample_station$Prec., 12)$fitted
sample_station$spei3 <- spei(sample_station$cwbal, 3)$fitted
sample_station$spei6 <- spei(sample_station$cwbal, 6)$fitted
sample_station$spei12 <- spei(sample_station$cwbal, 12)$fitted
# function to Categorize Drought Events
categorize_spi <- function(spi) {
case_when(
spi <= -2.0 ~ "Extreme Drought",
spi > -2.0 & spi <= -1.5 ~ "Severe Drought",
spi > -1.5 & spi <= -1.0 ~ "Moderate Drought",
spi > -1.0 & spi <= -0.5 ~ "Mild Drought",
TRUE ~ "No Drought"
)
}
categorize_spei <- function(spei) {
case_when(
spei <= -2.0 ~ "Extreme Drought",
spei > -2.0 & spei <= -1.5 ~ "Severe Drought",
spei > -1.5 & spei <= -1.0 ~ "Moderate Drought",
spei > -1.0 & spei <= -0.5 ~ "Mild Drought",
TRUE ~ "No Drought"
)
}
#Categorize Drought Events
sample_station <- sample_station %>%
mutate(
spi3_cat = categorize_spi(spi3),
spi6_cat = categorize_spi(spi6),
spi12_cat = categorize_spi(spi12)
)
sample_station <- sample_station %>%
mutate(
spei3_cat = categorize_spei(spei3),
spei6_cat = categorize_spei(spei6),
spei12_cat = categorize_spei(spei12)
)
#Summarize Drought Events by Year
# Count occurrences of drought categories for spi3 and spi6 for each year
drought_counts <- sample_station %>%
group_by(Year) %>%
summarise(
spi3_mild = sum(spi3_cat == 'Mild Drought'),
spi3_moderate = sum(spi3_cat == "Moderate Drought"),
spi3_severe = sum(spi3_cat == "Severe Drought"),
spi3_extreme = sum(spi3_cat == "Extreme Drought"),
spei3_mild = sum(spei3_cat == "Mild Drought"),
spei3_moderate = sum(spei3_cat == "Moderate Drought"),
spei3_severe = sum(spei3_cat == "Severe Drought"),
spei3_extreme = sum(spei3_cat == "Extreme Drought"),
spi6_mild = sum(spi6_cat == "Mild Drought"),
spi6_moderate = sum(spi6_cat == "Moderate Drought"),
spi6_severe = sum(spi6_cat == "Severe Drought"),
spi6_extreme = sum(spi6_cat == "Extreme Drought"),
spei6_mild = sum(spei6_cat == "Mild Drought"),
spei6_moderate = sum(spei6_cat == "Moderate Drought"),
spei6_severe = sum(spei6_cat == "Severe Drought"),
spei6_extreme = sum(spei6_cat == "Extreme Drought"),
spi12_mild = sum(spi12_cat == 'Mild Drought'),
spi12_moderate = sum(spi12_cat == "Moderate Drought"),
spi12_severe = sum(spi12_cat == "Severe Drought"),
spi12_extreme = sum(spi12_cat == "Extreme Drought"),
spei12_mild = sum(spei12_cat == "Mild Drought"),
spei12_moderate = sum(spei12_cat == "Moderate Drought"),
spei12_severe = sum(spei12_cat == "Severe Drought"),
spei12_extreme = sum(spei12_cat == "Extreme Drought")
)
# Draw the histogram of the Drought Categories
drought_long_spi <- drought_counts %>%
pivot_longer(cols = starts_with(c("spi3_", "spi6_", "spi12_")), names_to = "Category", values_to = "Count")
drought_long_spei <- drought_counts %>%
pivot_longer(cols = starts_with(c("spei3_", "spei6_", "spei12_")), names_to = "Category", values_to = "Count")
plot1 <- ggplot(drought_long_spi, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = paste0(sheetstation," Drought Category Distribution"), x = "Drought Category", y = "Total Count") +
theme_minimal() +
scale_fill_viridis_d() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot1)
plot2 <- ggplot(drought_long_spei, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = "Drought Category Distribution", x = "Drought Category", y = "Total Count") +
theme_minimal() +
scale_fill_viridis_d() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Draw the histogram of the Drought Categories
drought_long_spi <- drought_counts %>%
pivot_longer(cols = starts_with(c("spi3_", "spi6_", "spi12_")), names_to = "Category", values_to = "Count")
drought_long_spei <- drought_counts %>%
pivot_longer(cols = starts_with(c("spei3_", "spei6_", "spei12_")), names_to = "Category", values_to = "Count")
plot1 <- ggplot(drought_long_spi, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = paste0(sheetstation," Drought Category SPI Distribution"), x = "Drought Category", y = "Total Count") +
theme_minimal() +
scale_fill_viridis_d() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot1)
plot2 <- ggplot(drought_long_spei, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = paste0(sheetstation," Drought Category SPEI Distribution"), x = "Drought Category", y = "Total Count") +
theme_minimal() +
scale_fill_viridis_d() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot2)
# Plotting the line graph
#for spi
drought_long_spi <- drought_counts %>%
pivot_longer(cols = starts_with(c("spi12_", "spi6_", "spi3_")), names_to = c("Index", "Category"), values_to = "Count", names_sep = "_")
plot3 <- ggplot(drought_long_spi, aes(x = Year, y = Count, color = Category)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
labs(title =  paste0(sheetstation," Drought Categories Of SPI Over the Years"),
x = "Year",
y = "Count of Drought Events") +
theme_minimal() +
theme(legend.title = element_blank()) +
scale_color_viridis_d() +
facet_wrap(~ Category + Index, ncol = 2, scales = "free_y")
print(plot3)
#for spei
drought_long_spei <- drought_counts %>%
pivot_longer(cols = starts_with(c("spei12_", "spei6_", "spei3_")), names_to = c("Index", "Category"), values_to = "Count", names_sep = "_")
plot4 <- ggplot(drought_long_spei, aes(x = Year, y = Count, color = Category)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
labs(title =  paste0(sheetstation," Drought Categories Of SPEI Over the Years"),
x = "Year",
y = "Count of Drought Events") +
theme_minimal() +
theme(legend.title = element_blank()) +
scale_color_viridis_d() +
facet_wrap(~ Category + Index, ncol = 2, scales = "free_y")
print(plot4)
#multiple plot of index values
plot5 <- ggplot(sample_station, aes(x = factor(Year))) +  # Use factor for Year to treat it as discrete values
geom_col(aes(y = spi6, fill = "SPI6"), width = 0.1, position = position_dodge(width = 0.2)) +   # Side-by-side dodge
geom_col(aes(y = spei6, fill = "SPEI6"), width = 0.1, position = position_dodge(width = 0.3)) + # Same dodge for SPEI3
scale_x_discrete(breaks = seq(min(sample_station$Year), max(sample_station$Year), by = 2)) +   # Year intervals set to 4
labs(title = paste0(sheetstation," SPI6 and SPEI6 Indices Over Time"),
x = "Year",
y = "spi36, spei6") +
scale_fill_manual(values = c("SPI6" = "blue", "SPEI6" = "red")) +   # Custom colors for SPI3 and SPEI3
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
print(plot5)
#multiple plot of index values
plot_spi_spei <- function(data, x_var, y_var1, y_var2, sheetstation, fill_colors = c("SPI6" = "blue", "SPEI6" = "red"), width1 = 0.1, width2 = 0.1, dodge_width1 = 0.2, dodge_width2 = 0.3) {
library(ggplot2)
# Create the plot using ggplot2
plot <- ggplot(data, aes(x = factor(.data[[x_var]]))) +  # Use factor for x variable to treat it as discrete
geom_col(aes_string(y = y_var1, fill = "'SPI6'"), width = width1, position = position_dodge(width = dodge_width1)) +   # Side-by-side dodge for y_var1
geom_col(aes_string(y = y_var2, fill = "'SPEI6'"), width = width2, position = position_dodge(width = dodge_width2)) + # Same dodge for y_var2
scale_x_discrete(breaks = seq(min(data[[x_var]]), max(data[[x_var]]), by = 2)) +   # Year intervals set to 2
labs(title = paste0(sheetstation, " SPI6 and SPEI6 Indices Over Time"),
x = x_var,
y = paste(y_var1, ", ", y_var2)) +
scale_fill_manual(values = fill_colors) +   # Custom colors for SPI6 and SPEI6
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
# Print the plot
print(plot)
}
plot_spi_spei(
data = sample_station,
x_var = "Year",
y_var1 = "spi6",
y_var2 = "spei6",
sheetstation = samplestation
)
plot_spi_spei(
data = sample_station,
x_var = "Year",
y_var1 = "spi6",
y_var2 = "spei6",
sheetstation = samplestation
)
plot_spi_spei(
data = sample_station,
x_var = "Year",
y_var1 = "spi6",
y_var2 = "spei6",
sheetstation = sheetstation
)
#multiple plot of index values
plot_spi_spei <- function(data, x_var, spi_vars, spei_vars, sheetstation, fill_colors = c("SPI3" = "blue", "SPI6" = "green", "SPI12" = "purple",
"SPEI3" = "red", "SPEI6" = "orange", "SPEI12" = "brown"),
width = 0.1, dodge_width = 0.2) {
plot <- ggplot(data, aes(x = factor(.data[[x_var]]))) +
scale_x_discrete(breaks = seq(min(data[[x_var]]), max(data[[x_var]]), by = 2)) +  # Year intervals set to 2
labs(title = paste0(sheetstation, " SPI and SPEI Indices Over Time"),
x = x_var,
y = "Indices") +
scale_fill_manual(values = fill_colors) +  # Custom colors for each index
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels
# Add SPI bars for each index (spi3, spi6, spi12)
for (i in seq_along(spi_vars)) {
plot <- plot + geom_col(aes_string(y = spi_vars[i], fill = paste0("'SPI", c(3, 6, 12)[i], "'")),
width = width, position = position_dodge(width = dodge_width + i * 0.1))
}
# Add SPEI bars for each index (spei3, spei6, spei12)
for (i in seq_along(spei_vars)) {
plot <- plot + geom_col(aes_string(y = spei_vars[i], fill = paste0("'SPEI", c(3, 6, 12)[i], "'")),
width = width, position = position_dodge(width = dodge_width + i * 0.1))
}
print(plot)
}
plot_spi_spei(
data = sample_station,
x_var = "Year",
spi_vars = c("spi3", "spi6", "spi12"),
spei_vars = c("spei3", "spei6", "spei12"),
sheetstation = "sheetstation"
)
#multiple plot of index values
plot_spi_spei <- function(data, x_var, y_var1, y_var2, sheetstation, fill_colors = c("SPI6" = "blue", "SPEI6" = "red"), width1 = 0.1, width2 = 0.1, dodge_width1 = 0.2, dodge_width2 = 0.3) {
library(ggplot2)
# Create the plot using ggplot2
plot <- ggplot(data, aes(x = factor(.data[[x_var]]))) +  # Use factor for x variable to treat it as discrete
geom_col(aes_string(y = y_var1, fill = "'SPI6'"), width = width1, position = position_dodge(width = dodge_width1)) +   # Side-by-side dodge for y_var1
geom_col(aes_string(y = y_var2, fill = "'SPEI6'"), width = width2, position = position_dodge(width = dodge_width2)) + # Same dodge for y_var2
scale_x_discrete(breaks = seq(min(data[[x_var]]), max(data[[x_var]]), by = 2)) +   # Year intervals set to 2
labs(title = paste0(sheetstation, " SPI6 and SPEI6 Indices Over Time"),
x = x_var,
y = paste(y_var1, ", ", y_var2)) +
scale_fill_manual(values = fill_colors) +   # Custom colors for SPI6 and SPEI6
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
# Print the plot
print(plot)
}
plot_spi_spei(
data = sample_station,
x_var = "Year",
y_var1 = "spi6",
y_var2 = "spei6",
sheetstation = sheetstation
)
plot_spi_spei(
data = sample_station,
x_var = "Year",
y_var1 = "spi3",
y_var2 = "spei3",
sheetstation = sheetstation
)
plot_spi_spei(
data = sample_station,
x_var = "Year",
y_var1 = "spi12",
y_var2 = "spei12",
sheetstation = sheetstation
)
#multiple plot of index values
plot_spi_spei <- function(data, x_var, y_var1, y_var2, sheetstation,
fill_colors = c("SPI6" = "blue", "SPEI6" = "red"),
width1 = 0.1, width2 = 0.1, dodge_width1 = 0.2, dodge_width2 = 0.3) {
plot <- ggplot(data, aes(x = factor(.data[[x_var]]))) +  # Use factor for x variable to treat it as discrete
geom_col(aes_string(y = y_var1, fill = "'SPI6'"), width = width1, position = position_dodge(width = dodge_width1)) +   # Side-by-side dodge for y_var1
geom_col(aes_string(y = y_var2, fill = "'SPEI6'"), width = width2, position = position_dodge(width = dodge_width2)) + # Same dodge for y_var2
scale_x_discrete(breaks = seq(min(data[[x_var]]), max(data[[x_var]]), by = 2)) +   # Year intervals set to 2
labs(title = paste0(sheetstation, x_var, " and  ",y_var1, " Indices Over Time"),
x = x_var,
y = paste(y_var1, ", ", y_var2)) +
scale_fill_manual(values = fill_colors) +   # Custom colors for SPI6 and SPEI6
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
# Print the plot
print(plot)
}
plot_spi_spei(
data = sample_station,
x_var = "Year",
y_var1 = "spi6",
y_var2 = "spei6",
sheetstation = sheetstation
)
#multiple plot of index values
plot_spi_spei <- function(data, x_var, y_var1, y_var2, sheetstation,
fill_colors = c(y_var1 = "blue", y_var2= "red"),
width1 = 0.1, width2 = 0.1, dodge_width1 = 0.2, dodge_width2 = 0.3) {
plot <- ggplot(data, aes(x = factor(.data[[x_var]]))) +  # Use factor for x variable to treat it as discrete
geom_col(aes_string(y = y_var1, fill = "'SPI6'"), width = width1, position = position_dodge(width = dodge_width1)) +   # Side-by-side dodge for y_var1
geom_col(aes_string(y = y_var2, fill = "'SPEI6'"), width = width2, position = position_dodge(width = dodge_width2)) + # Same dodge for y_var2
scale_x_discrete(breaks = seq(min(data[[x_var]]), max(data[[x_var]]), by = 2)) +   # Year intervals set to 2
labs(title = paste0(sheetstation," ",y_var1, " and  ",y_var2, " Indices Over Time"),
x = x_var,
y = paste(y_var1, ", ", y_var2)) +
scale_fill_manual(values = fill_colors) +   # Custom colors for SPI6 and SPEI6
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
# Print the plot
print(plot)
}
plot_spi_spei(
data = sample_station,
x_var = "Year",
y_var1 = "spi6",
y_var2 = "spei6",
sheetstation = sheetstation
)
#multiple plot of index values
plot_spi_spei <- function(data, x_var, y_var1, y_var2, sheetstation,
fill_colors = c(y_var1 = "blue", y_var2= "red"),
width1 = 0.1, width2 = 0.1, dodge_width1 = 0.2, dodge_width2 = 0.3) {
plot <- ggplot(data, aes(x = factor(.data[[x_var]]))) +  # Use factor for x variable to treat it as discrete
geom_col(aes_string(y = y_var1, fill = y_var1), width = width1, position = position_dodge(width = dodge_width1)) +   # Side-by-side dodge for y_var1
geom_col(aes_string(y = y_var2, fill = y_var2), width = width2, position = position_dodge(width = dodge_width2)) + # Same dodge for y_var2
scale_x_discrete(breaks = seq(min(data[[x_var]]), max(data[[x_var]]), by = 2)) +   # Year intervals set to 2
labs(title = paste0(sheetstation," ",y_var1, " and  ",y_var2, " Indices Over Time"),
x = x_var,
y = paste(y_var1, ", ", y_var2)) +
scale_fill_manual(values = fill_colors) +   # Custom colors for SPI6 and SPEI6
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
# Print the plot
print(plot)
}
plot_spi_spei(
data = sample_station,
x_var = "Year",
y_var1 = "spi6",
y_var2 = "spei6",
sheetstation = sheetstation
)
SPI6
SPI6
l
l
#multiple plot of index values
plot_spi_spei <- function(data, x_var, y_var1, y_var2, sheetstation,
fill_colors = c(y_var1 = "blue", y_var2= "red"),
width1 = 0.1, width2 = 0.1, dodge_width1 = 0.2, dodge_width2 = 0.3) {
plot <- ggplot(data, aes(x = factor(.data[[x_var]]))) +  # Use factor for x variable to treat it as discrete
geom_col(aes_string(y = y_var1, fill = "'SPI6'"), width = width1, position = position_dodge(width = dodge_width1)) +   # Side-by-side dodge for y_var1
geom_col(aes_string(y = y_var2, fill = "'SPEI6'"), width = width2, position = position_dodge(width = dodge_width2)) + # Same dodge for y_var2
scale_x_discrete(breaks = seq(min(data[[x_var]]), max(data[[x_var]]), by = 2)) +   # Year intervals set to 2
labs(title = paste0(sheetstation," ",y_var1, " and  ",y_var2, " Indices Over Time"),
x = x_var,
y = paste(y_var1, ", ", y_var2)) +
scale_fill_manual(values = fill_colors) +   # Custom colors for SPI6 and SPEI6
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
# Print the plot
print(plot)
}
plot_spi_spei(
data = sample_station,
x_var = "Year",
y_var1 = "spi6",
y_var2 = "spei6",
sheetstation = sheetstation
)
#multiple plot of index values
plot_spi_spei <- function(data, x_var, y_var1, y_var2, sheetstation,
fill_colors = c(y_var1 = "blue", y_var2= "red"),
width1 = 0.1, width2 = 0.1, dodge_width1 = 0.2, dodge_width2 = 0.3) {
plot <- ggplot(data, aes(x = factor(.data[[x_var]]))) +  # Use factor for x variable to treat it as discrete
geom_col(aes_string(y = y_var1, fill = paste0(y_var1)), width = width1, position = position_dodge(width = dodge_width1)) +   # Side-by-side dodge for y_var1
geom_col(aes_string(y = y_var2, fill = paste0(y_var2)), width = width2, position = position_dodge(width = dodge_width2)) + # Same dodge for y_var2
scale_x_discrete(breaks = seq(min(data[[x_var]]), max(data[[x_var]]), by = 2)) +   # Year intervals set to 2
labs(title = paste0(sheetstation," ",y_var1, " and  ",y_var2, " Indices Over Time"),
x = x_var,
y = paste(y_var1, ", ", y_var2)) +
scale_fill_manual(values = fill_colors) +   # Custom colors for SPI6 and SPEI6
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
# Print the plot
print(plot)
}
plot_spi_spei(
data = sample_station,
x_var = "Year",
y_var1 = "spi6",
y_var2 = "spei6",
sheetstation = sheetstation
)
#multiple plot of index values
plot_spi_spei <- function(data, x_var, y_var1, y_var2, sheetstation,
fill_colors = c(y_var1[0] = "blue", y_var2[0] = "red"),
plot_spi_spei(
data = sample_station,
x_var = "Year",
y_var1 = "spi6",
y_var2 = "spei6",
sheetstation = sheetstation
)
#multiple plot of index values
plot5 <- ggplot(sample_station, aes(x = factor(Year))) +  # Use factor for Year to treat it as discrete values
geom_col(aes(y = spi6, fill = "SPI6"), width = 0.1, position = position_dodge(width = 0.2)) +   # Side-by-side dodge
geom_col(aes(y = spei6, fill = "SPEI6"), width = 0.1, position = position_dodge(width = 0.3)) + # Same dodge for SPEI3
scale_x_discrete(breaks = seq(min(sample_station$Year), max(sample_station$Year), by = 2)) +   # Year intervals set to 4
labs(title = paste0(sheetstation," SPI6 and SPEI6 Indices Over Time"),
x = "Year",
y = "spi6, spei6") +
scale_fill_manual(values = c("SPI6" = "blue", "SPEI6" = "red")) +   # Custom colors for SPI3 and SPEI3
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
print(plot5)
plot6 <- ggplot(sample_station, aes(x = factor(Year))) +  # Use factor for Year to treat it as discrete values
geom_col(aes(y = spi3, fill = "SPI3"), width = 0.1, position = position_dodge(width = 0.2)) +   # Side-by-side dodge
geom_col(aes(y = spei3, fill = "SPEI3"), width = 0.1, position = position_dodge(width = 0.3)) + # Same dodge for SPEI3
scale_x_discrete(breaks = seq(min(sample_station$Year), max(sample_station$Year), by = 2)) +   # Year intervals set to 4
labs(title = paste0(sheetstation," SPI3 and SPEI3 Indices Over Time"),
x = "Year",
y = "spi3, spei3") +
scale_fill_manual(values = c("SPI3" = "blue", "SPEI3" = "red")) +   # Custom colors for SPI3 and SPEI3
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
print(plot6)
plot7 <- ggplot(sample_station, aes(x = factor(Year))) +  # Use factor for Year to treat it as discrete values
geom_col(aes(y = spi12, fill = "SPI12"), width = 0.1, position = position_dodge(width = 0.2)) +   # Side-by-side dodge
geom_col(aes(y = spei12, fill = "SPEI12"), width = 0.1, position = position_dodge(width = 0.3)) + # Same dodge for SPEI3
scale_x_discrete(breaks = seq(min(sample_station$Year), max(sample_station$Year), by = 2)) +   # Year intervals set to 4
labs(title = paste0(sheetstation," SPI12 and SPEI12 Indices Over Time"),
x = "Year",
y = "spi12, spei12") +
scale_fill_manual(values = c("SPI12" = "blue", "SPEI12" = "red")) +   # Custom colors for SPI3 and SPEI3
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
print(plot7)
#use boxplot
drought_long_boxplot <- drought_counts %>%
pivot_longer(
cols = c("spi3_mild", "spi3_moderate", "spi3_severe", "spi3_extreme",
"spi6_mild", "spi6_moderate", "spi6_severe", "spi6_extreme"),
names_to = "Category",
values_to = "Count"
)
plot8 <- ggplot(drought_long_boxplot, aes(x = Category, y = Count)) +
geom_boxplot() +
labs(title = "Boxplot of Drought Categories",
x = "Drought Category",
y = "Count of Drought Events") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Tilt x-axis labels for clarity
print(plot6)
#multiple plot of index values
plot5 <- ggplot(sample_station, aes(x = factor(Year))) +  # Use factor for Year to treat it as discrete values
geom_col(aes(y = spi6, fill = "SPI6"), width = 0.1, position = position_dodge(width = 0.2)) +   # Side-by-side dodge
geom_col(aes(y = spei6, fill = "SPEI6"), width = 0.1, position = position_dodge(width = 0.3)) + # Same dodge for SPEI3
scale_x_discrete(breaks = seq(min(sample_station$Year), max(sample_station$Year), by = 2)) +   # Year intervals set to 4
labs(title = paste0(sheetstation," SPI6 and SPEI6 Indices Over Time"),
x = "Year",
y = "spi6, spei6") +
scale_fill_manual(values = c("SPI6" = "blue", "SPEI6" = "red")) +   # Custom colors for SPI3 and SPEI3
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
print(plot5)
plot6 <- ggplot(sample_station, aes(x = factor(Year))) +  # Use factor for Year to treat it as discrete values
geom_col(aes(y = spi3, fill = "SPI3"), width = 0.1, position = position_dodge(width = 0.2)) +   # Side-by-side dodge
geom_col(aes(y = spei3, fill = "SPEI3"), width = 0.1, position = position_dodge(width = 0.3)) + # Same dodge for SPEI3
scale_x_discrete(breaks = seq(min(sample_station$Year), max(sample_station$Year), by = 2)) +   # Year intervals set to 4
labs(title = paste0(sheetstation," SPI3 and SPEI3 Indices Over Time"),
x = "Year",
y = "spi3, spei3") +
scale_fill_manual(values = c("SPI3" = "blue", "SPEI3" = "red")) +   # Custom colors for SPI3 and SPEI3
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
print(plot6)
plot7 <- ggplot(sample_station, aes(x = factor(Year))) +  # Use factor for Year to treat it as discrete values
geom_col(aes(y = spi12, fill = "SPI12"), width = 0.1, position = position_dodge(width = 0.2)) +   # Side-by-side dodge
geom_col(aes(y = spei12, fill = "SPEI12"), width = 0.1, position = position_dodge(width = 0.3)) + # Same dodge for SPEI3
scale_x_discrete(breaks = seq(min(sample_station$Year), max(sample_station$Year), by = 2)) +   # Year intervals set to 4
labs(title = paste0(sheetstation," SPI12 and SPEI12 Indices Over Time"),
x = "Year",
y = "spi12, spei12") +
scale_fill_manual(values = c("SPI12" = "blue", "SPEI12" = "red")) +   # Custom colors for SPI3 and SPEI3
theme_minimal() +
theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
print(plot7)
#use boxplot
drought_long_boxplot <- drought_counts %>%
pivot_longer(
cols = c("spi3_mild", "spi3_moderate", "spi3_severe", "spi3_extreme",
"spi6_mild", "spi6_moderate", "spi6_severe", "spi6_extreme"),
names_to = "Category",
values_to = "Count"
)
plot8 <- ggplot(drought_long_boxplot, aes(x = Category, y = Count)) +
geom_boxplot() +
labs(title = "Boxplot of Drought Categories",
x = "Drought Category",
y = "Count of Drought Events") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Tilt x-axis labels for clarity
print(plot8)
source("~/Downloads/PROF DROUGHT/Kadat_refactored.R")
View(drought_total_counts)
gc()
source("~/Downloads/PROF DROUGHT/Kadat_refactored.R")
gc()
source("~/Downloads/PROF DROUGHT/Kadat_refactored.R")
gc()
source("~/Downloads/PROF DROUGHT/Kadat_refactored.R")
View(Chara_spei6)
source("~/Downloads/PROF DROUGHT/Kadat_refactored.R")
View(sample_station)
gc()
source("~/Downloads/PROF DROUGHT/Kadat_refactored.R")
View(sp_cat)
print(sp_cat)
View(Chara_spei12)
gc()
source("~/Downloads/PROF DROUGHT/Kadat_refactored.R")
View(Chara_spei12)
View(drought_counts)
View(drought_long_boxplot)
View(drought_total_counts)
gc()
source("~/Downloads/PROF DROUGHT/Kadat_refactored.R")
source("~/Downloads/PROF DROUGHT/Kadat_refactored.R")
