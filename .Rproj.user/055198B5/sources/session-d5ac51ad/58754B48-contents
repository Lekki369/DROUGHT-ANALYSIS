# Load necessary libraries
pacman::p_load(readxl, ggplot2, dplyr, tidyr, SPEI, drought, Kendall, 
               lubridate, tidyverse, MASS, broom, trend, openxlsx, tseries, changepoint)

# Load Excel sheets
excelsheets <- excel_sheets("dataset/droughtdat.xlsx")
sheetstation <- excelsheets[1]
sample_station <- read_excel("dataset/droughtdat.xlsx", sheet = sheetstation)

# Calculate total years
total_years <- sample_station %>% pull(Year) %>% unique() %>% length()

# Yearly summary
year_summary <- sample_station %>%
  group_by(Year) %>%
  summarise(count = n()) %>%
  arrange(Year)

# Extract latitude
lat <- sample_station$Lat[1]

# Calculate PET, SHI, and other indices
sample_station <- sample_station %>%
  mutate(
    PET = hargreaves(Tmin = Tmin, Tmax = Tmax, lat = lat),
    SHI = Prec. / PET,
    cwbal = Prec. - PET,
    Tmean = (Tmin + Tmax) / 2,
    Aridity_Index = Prec. / PET,
    spi3 = spi(Prec., 3)$fitted,
    spi6 = spi(Prec., 6)$fitted,
    spi12 = spi(Prec., 12)$fitted,
    spei3 = spei(cwbal, 3)$fitted,
    spei6 = spei(cwbal, 6)$fitted,
    spei12 = spei(cwbal, 12)$fitted
  )

# Define categorization functions
categorize_spi <- function(spi) {
  case_when(
    spi <= -2.0 ~ "Extreme Drought",
    spi > -2.0 & spi <= -1.5 ~ "Severe Drought",
    spi > -1.5 & spi <= -1.0 ~ "Moderate Drought",
    spi > -1.0 & spi <= -0.5 ~ "Mild Drought",
    TRUE ~ "No Drought"
  )
}

categorize_spei <- function(spei) {
  case_when(
    spei <= -2.0 ~ "Extreme Drought",
    spei > -2.0 & spei <= -1.5 ~ "Severe Drought",
    spei > -1.5 & spei <= -1.0 ~ "Moderate Drought",
    spei > -1.0 & spei <= -0.5 ~ "Mild Drought",
    TRUE ~ "No Drought"
  )
}

# Categorize drought events
sample_station <- sample_station %>%
  mutate(
    spi3_cat = categorize_spi(spi3),
    spi6_cat = categorize_spi(spi6),
    spi12_cat = categorize_spi(spi12),
    spei3_cat = categorize_spei(spei3),
    spei6_cat = categorize_spei(spei6),
    spei12_cat = categorize_spei(spei12)
  )

# Summarize drought events by year
drought_counts <- sample_station %>%
  group_by(Year) %>%
  summarise(
    spi3_mild = sum(spi3_cat == 'Mild Drought', na.rm = TRUE),
    spi3_moderate = sum(spi3_cat == "Moderate Drought", na.rm = TRUE),
    spi3_severe = sum(spi3_cat == "Severe Drought", na.rm = TRUE),
    spi3_extreme = sum(spi3_cat == "Extreme Drought", na.rm = TRUE),
    
    spei3_mild = sum(spei3_cat == "Mild Drought", na.rm = TRUE),
    spei3_moderate = sum(spei3_cat == "Moderate Drought", na.rm = TRUE),
    spei3_severe = sum(spei3_cat == "Severe Drought", na.rm = TRUE),
    spei3_extreme = sum(spei3_cat == "Extreme Drought", na.rm = TRUE),
    
    spi6_mild = sum(spi6_cat == "Mild Drought", na.rm = TRUE),
    spi6_moderate = sum(spi6_cat == "Moderate Drought", na.rm = TRUE),
    spi6_severe = sum(spi6_cat == "Severe Drought", na.rm = TRUE),
    spi6_extreme = sum(spi6_cat == "Extreme Drought", na.rm = TRUE),
    
    spei6_mild = sum(spei6_cat == "Mild Drought", na.rm = TRUE),
    spei6_moderate = sum(spei6_cat == "Moderate Drought", na.rm = TRUE),
    spei6_severe = sum(spei6_cat == "Severe Drought", na.rm = TRUE),
    spei6_extreme = sum(spei6_cat == "Extreme Drought", na.rm = TRUE),
    
    spi12_mild = sum(spi12_cat == 'Mild Drought', na.rm = TRUE),
    spi12_moderate = sum(spi12_cat == "Moderate Drought", na.rm = TRUE),
    spi12_severe = sum(spi12_cat == "Severe Drought", na.rm = TRUE),
    spi12_extreme = sum(spi12_cat == "Extreme Drought", na.rm = TRUE),
    
    spei12_mild = sum(spei12_cat == "Mild Drought", na.rm = TRUE),
    spei12_moderate = sum(spei12_cat == "Moderate Drought", na.rm = TRUE),
    spei12_severe = sum(spei12_cat == "Severe Drought", na.rm = TRUE),
    spei12_extreme = sum(spei12_cat == "Extreme Drought", na.rm = TRUE)
  )

# Pivot data for plotting
drought_long_spi <- drought_counts %>%
  pivot_longer(cols = starts_with("spi"), names_to = "Category", values_to = "Count")

drought_long_spei <- drought_counts %>%
  pivot_longer(cols = starts_with("spei"), names_to = "Category", values_to = "Count")

# Plot distributions
plot1 <- ggplot(drought_long_spi, aes(x = Category, y = Count, fill = Category)) +
  geom_bar(stat = "identity") +
  labs(title = paste0(sheetstation, " Drought Category SPI Distribution"), x = "Drought Category", y = "Total Count") +
  theme_minimal() +
  scale_fill_viridis_d() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot1)

plot2 <- ggplot(drought_long_spei, aes(x = Category, y = Count, fill = Category)) +
  geom_bar(stat = "identity") +
  labs(title = paste0(sheetstation, " Drought Category SPEI Distribution"), x = "Drought Category", y = "Total Count") +
  theme_minimal() +
  scale_fill_viridis_d() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(plot2)

# Line plot of drought categories over the years
drought_long_spi <- drought_counts %>%
  pivot_longer(cols = starts_with("spi"), 
               names_to = c("Index", "Category"), 
               names_sep = "_", 
               values_to = "Count")

plot3 <- ggplot(drought_long_spi, aes(x = Category, y = Count, fill = Category)) +
  geom_bar(stat = "identity", position = "dodge") +  # Bar plot for total count of drought events
  labs(title = paste0(sheetstation, " Drought Categories of SPI Over the Years"), 
       x = "Drought Category", y = "Total Count of Drought Events") +  # Axis labels and title
  theme_minimal() +  # Minimal theme
  theme(legend.title = element_blank()) +  # Remove legend title
  scale_fill_viridis_d() +  # Fill color for categories (Mild, Severe, Extreme)
  facet_wrap(~ Index, ncol = 3)  # Facet by SPI index (SPI-3, SPI-6, SPI-12)

print(plot3)
drought_long_spei <- drought_counts %>%
  pivot_longer(cols = starts_with("spei"), 
               names_to = c("Index", "Category"), 
               names_sep = "_", 
               values_to = "Count")

plot4 <- ggplot(drought_long_spei, aes(x = Category, y = Count, fill = Category)) +
  geom_bar(stat = "identity", position = "dodge") +  # Bar plot for total count of drought events
  labs(title = paste0(sheetstation, " Drought Categories of SPEI Over the Years"), 
       x = "Drought Category", y = "Total Count of Drought Events") +  # Axis labels and title
  theme_minimal() +  # Minimal theme
  theme(legend.title = element_blank()) +  # Remove legend title
  scale_fill_viridis_d() +  # Fill color for categories (Mild, Severe, Extreme)
  facet_wrap(~ Index, ncol = 3)  # Facet by SPEI index (SPEI-3, SPEI-6, SPEI-12)

print(plot4)

# SPI and SPEI indices over time
indices_plot <- function(data, y_vars, title, y_label) {
  ggplot(data, aes(x = factor(Year))) +  # Use factor for Year to treat it as discrete values
    geom_col(aes(y = !!sym(y_vars[1]), fill = "SPI"), width = 0.1, position = position_dodge(width = 0.2)) +  # Side-by-side dodge
    geom_col(aes(y = !!sym(y_vars[2]), fill = "SPEI"), width = 0.1, position = position_dodge(width = 0.3)) +  # Same dodge for SPEI
    scale_x_discrete(breaks = seq(min(data$Year), max(data$Year), by = 2)) +  # Year intervals set to 2
    labs(title = title, x = "Year", y = y_label) +
    scale_fill_manual(values = c("SPI" = "blue", "SPEI" = "red")) +  # Custom colors for SPI and SPEI
    theme_minimal() +
    theme(legend.title = element_blank(), axis.text.x = element_text(angle = 90, hjust = 1))  # Remove legend title and rotate x-axis labels
}

plot5 <- indices_plot(sample_station, c("spi6", "spei6"), paste0(sheetstation, " SPI6 and SPEI6 Indices Over Time"), "spi6, spei6")
plot6 <- indices_plot(sample_station, c("spi3", "spei3"), paste0(sheetstation, " SPI3 and SPEI3 Indices Over Time"), "spi3, spei3")
plot7 <- indices_plot(sample_station, c("spi12", "spei12"), paste0(sheetstation, " SPI12 and SPEI12 Indices Over Time"), "spi12, spei12")

print(plot5)
print(plot6)
print(plot7)

# Boxplot of drought categories
drought_long_boxplot <- drought_counts %>%
  pivot_longer(cols = starts_with("spi"), names_to = "Category", values_to = "Count")

plot8 <- ggplot(drought_long_boxplot, aes(x = Category, y = Count)) +
  geom_boxplot() +
  labs(title = "Boxplot of Drought Categories", x = "Drought Category", y = "Count of Drought Events") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Tilt x-axis labels for clarity
print(plot8)

# Create drought categories for all indices
create_drought_categories <- function(data, breaks = c(-Inf, -2, -1.5, -1, -0.5), labels = c("Extreme", "Severe", "Moderate", "Mild")) {
  cut(data, breaks = breaks, labels = labels)
}

# Categorize indices
indices <- list(spi3 = sample_station$spi3, spi6 = sample_station$spi6, spi12 = sample_station$spi12, spei3 = sample_station$spei3, spei6 = sample_station$spei6, spei12 = sample_station$spei12)
drought_categories <- lapply(indices, create_drought_categories)
sp_cat <- data.frame(do.call(rbind, lapply(drought_categories, table)))
print(sp_cat)

# Compute drought characteristics
compute_drought_characteristics <- function(data, index_name) {
  data %>%  
    group_by(Year) %>% 
    summarise(
      Severity = sum(!!sym(index_name), na.rm = TRUE),
      Duration = sum(!!sym(index_name) < 0, na.rm = TRUE),
      Frequency = round(sum(!!sym(index_name) < 0, na.rm = TRUE) * 100 / 12, 2),
      Intensity = round(Severity / Duration, 2)
    )
}

Chara_spi3 <- compute_drought_characteristics(sample_station, "spi3")
Chara_spi6 <- compute_drought_characteristics(sample_station, "spi6")
Chara_spi12 <- compute_drought_characteristics(sample_station, "spi12")
Chara_spei3 <- compute_drought_characteristics(sample_station, "spei3")
Chara_spei6 <- compute_drought_characteristics(sample_station, "spei6")
Chara_spei12 <- compute_drought_characteristics(sample_station, "spei12")

# Calculate Exposure, Vulnerability, and Resilience
calculate_exposure <- function(data, drought_column, total_duration) {
  total_drought_duration <- sum(data[[drought_column]] < 0, na.rm = TRUE)
  Ex <- total_drought_duration / total_duration
  return(Ex)
}

calculate_vulnerability <- function(data, drought_column) {
  SPI_drought <- data[[drought_column]][data[[drought_column]] < 0 & !is.na(data[[drought_column]])]
  M <- length(SPI_drought)
  Vu <- if (M > 0) sum(abs(SPI_drought), na.rm = TRUE) / M else NA
  return(Vu)
}

calculate_resilience <- function(data, drought_column) {
  drought_durations <- data[[drought_column]][data[[drought_column]] < 0 & !is.na(data[[drought_column]])]
  M <- length(drought_durations)
  sum_DDi <- sum(drought_durations, na.rm = TRUE)
  Re <- if (M > 0 & sum_DDi != 0) M / sum_DDi else NA
  return(Re)
}

total_duration <- sum(year_summary$count, na.rm = TRUE)

# Add Exposure, Vulnerability, and Resilience to characteristics
Chara_spei6 <- Chara_spei6 %>%
  mutate(
    DroughtExposure = calculate_exposure(sample_station, "spei6", total_duration),
    DroughtVulnerability = calculate_vulnerability(sample_station, "spei6"),
    DroughtResilience = calculate_resilience(sample_station, "spei6")
  )

Chara_spei3 <- Chara_spei3 %>%
  mutate(
    DroughtExposure = calculate_exposure(sample_station, "spei3", total_duration),
    DroughtVulnerability = calculate_vulnerability(sample_station, "spei3"),
    DroughtResilience = calculate_resilience(sample_station, "spei3")
  )

Chara_spei12 <- Chara_spei12 %>%
  mutate(
    DroughtExposure = calculate_exposure(sample_station, "spei12", total_duration),
    DroughtVulnerability = calculate_vulnerability(sample_station, "spei12"),
    DroughtResilience = calculate_resilience(sample_station, "spei12")
  )

Chara_spi3 <- Chara_spi3 %>%
  mutate(
    DroughtExposure = calculate_exposure(sample_station, "spi3", total_duration),
    DroughtVulnerability = calculate_vulnerability(sample_station, "spi3"),
    DroughtResilience = calculate_resilience(sample_station, "spi3")
  )

Chara_spi6 <- Chara_spi6 %>%
  mutate(
    DroughtExposure = calculate_exposure(sample_station, "spi6", total_duration),
    DroughtVulnerability = calculate_vulnerability(sample_station, "spi6"),
    DroughtResilience = calculate_resilience(sample_station, "spi6")
  )

Chara_spi12 <- Chara_spi12 %>%
  mutate(
    DroughtExposure = calculate_exposure(sample_station, "spi12", total_duration),
    DroughtVulnerability = calculate_vulnerability(sample_station, "spi12"),
    DroughtResilience = calculate_resilience(sample_station, "spi12")
  )

# Define linear model equation for annotation
lm_eqn <- function(df, x_var, y_var) {
  model <- lm(as.formula(paste(y_var, "~", x_var)), data = df)
  eq <- substitute(italic(y) == a + b %.% italic(x) * "," ~~ italic(r)^2 ~ "=" ~ r2, 
                   list(a = format(coef(model)[1], digits = 2), 
                        b = format(coef(model)[2], digits = 2), 
                        r2 = format(summary(model)$r.squared, digits = 3)))
  as.character(as.expression(eq))
}

# Plot SPI vs SPEI
plot_drought_index_relationship <- function(df, x_var, y_var, title) {
  df_clean <- df %>%
    filter(!is.na(.data[[x_var]]), !is.na(.data[[y_var]]), 
           !is.infinite(.data[[x_var]]), !is.infinite(.data[[y_var]]), 
           !is.nan(.data[[x_var]]), !is.nan(.data[[y_var]]))
  
  ggplot(df_clean, aes_string(x = x_var, y = y_var)) +
    geom_point(color = "blue") +
    geom_smooth(method = "lm", se = FALSE, color = "red") +
    labs(title = title, x = x_var, y = y_var) +
    annotate("text", x = min(df_clean[[x_var]], na.rm = TRUE), y = max(df_clean[[y_var]], na.rm = TRUE), 
             label = lm_eqn(df_clean, x_var, y_var), parse = TRUE, hjust = 0)
}

plot9 <- plot_drought_index_relationship(sample_station, "spi3", "spei3", "Linear Relationship between SPI3 and SPEI3")
plot10 <- plot_drought_index_relationship(sample_station, "spi6", "spei6", "Linear Relationship between SPI6 and SPEI6")
plot11 <- plot_drought_index_relationship(sample_station, "spi12", "spei12", "Linear Relationship between SPI12 and SPEI12")

print(plot9)
print(plot10)
print(plot11)

# Mann-Kendall trend test and Sen’s Slope
trend_result <- sample_station %>%
  summarise(
    Tmin_Mann_Tau = MannKendall(Tmin)$tau,
    Tmin_Mann_p = MannKendall(Tmin)$sl,
    Tmin_Sen_slope = sens.slope(Tmin)$estimate,
    Tmax_Mann_Tau = MannKendall(Tmax)$tau,
    Tmax_Mann_p = MannKendall(Tmax)$sl,
    Tmax_Sen_slope = sens.slope(Tmax)$estimate,
    Pre_Mann_Tau = MannKendall(Prec.)$tau,
    Pre_Mann_p = MannKendall(Prec.)$sl,
    Pre_Sen_slope = sens.slope(Prec.)$estimate
  )

tidy_results <- trend_result %>%
  pivot_longer(cols = everything(), names_to = c("Variable", "Statistic"), names_sep = "_", values_to = "Value")
print(tidy_results)

# Trend plot of Tmin, Tmax, and Precipitation over time
# Separate plot for Tmin
plot12 <- ggplot(sample_station, aes(x = Year)) +
  geom_point(aes(y = Tmin), color = "blue", size = 2) +
  geom_smooth(aes(y = Tmin), method = "loess", se = FALSE, color = "red") +
  labs(title = "Trend of Tmin Over Time",
       x = "Year", y = "Tmin",
       caption = "Blue: Tmin") +
  theme_minimal()

# Separate plot for Tmax
plot13 <- ggplot(sample_station, aes(x = Year)) +
  geom_point(aes(y = Tmax), color = "red", size = 2) +
  geom_smooth(aes(y = Tmax), method = "loess", se = FALSE, color = "blue") +
  labs(title = "Trend of Tmax Over Time",
       x = "Year", y = "Tmax",
       caption = "Red: Tmax") +
  theme_minimal()

# Separate plot for Precipitation (Prec.)
plot14 <- ggplot(sample_station, aes(x = Year)) +
  geom_point(aes(y = Prec.), color = "green", size = 2) +
  geom_smooth(aes(y = Prec.), method = "loess", se = FALSE, color = "red") +
  labs(title = "Trend of Precipitation Over Time",
       x = "Year", y = "Precipitation",
       caption = "Green: Precipitation") +
  theme_minimal()

# Print the plots
print(plot12)
print(plot13)
print(plot14)


# Calculate total counts of drought categories
drought_total_counts <- sample_station %>%
  summarise(
    spi3_mild_total = sum(spi3_cat == 'Mild Drought', na.rm = TRUE),
    spi3_moderate_total = sum(spi3_cat == "Moderate Drought", na.rm = TRUE),
    spi3_severe_total = sum(spi3_cat == "Severe Drought", na.rm = TRUE),
    spi3_extreme_total = sum(spi3_cat == "Extreme Drought", na.rm = TRUE),
    
    spi6_mild_total = sum(spi6_cat == 'Mild Drought', na.rm = TRUE),
    spi6_moderate_total = sum(spi6_cat == "Moderate Drought", na.rm = TRUE),
    spi6_severe_total = sum(spi6_cat == "Severe Drought", na.rm = TRUE),
    spi6_extreme_total = sum(spi6_cat == "Extreme Drought", na.rm = TRUE),
    
    spi12_mild_total = sum(spi12_cat == 'Mild Drought', na.rm = TRUE),
    spi12_moderate_total = sum(spi12_cat == "Moderate Drought", na.rm = TRUE),
    spi12_severe_total = sum(spi12_cat == "Severe Drought", na.rm = TRUE),
    spi12_extreme_total = sum(spi12_cat == "Extreme Drought", na.rm = TRUE),
    
    spei3_mild_total = sum(spei3_cat == 'Mild Drought', na.rm = TRUE),
    spei3_moderate_total = sum(spei3_cat == "Moderate Drought", na.rm = TRUE),
    spei3_severe_total = sum(spei3_cat == "Severe Drought", na.rm = TRUE),
    spei3_extreme_total = sum(spei3_cat == "Extreme Drought", na.rm = TRUE),
    
    spei6_mild_total = sum(spei6_cat == 'Mild Drought', na.rm = TRUE),
    spei6_moderate_total = sum(spei6_cat == "Moderate Drought", na.rm = TRUE),
    spei6_severe_total = sum(spei6_cat == "Severe Drought", na.rm = TRUE),
    spei6_extreme_total = sum(spei6_cat == "Extreme Drought", na.rm = TRUE),
    
    spei12_mild_total = sum(spei12_cat == 'Mild Drought', na.rm = TRUE),
    spei12_moderate_total = sum(spei12_cat == "Moderate Drought", na.rm = TRUE),
    spei12_severe_total = sum(spei12_cat == "Severe Drought", na.rm = TRUE),
    spei12_extreme_total = sum(spei12_cat == "Extreme Drought", na.rm = TRUE)
  )

# Homogeneity Test (Normality Test for Precipitation)
homogeneity_test <- tseries::adf.test(sample_station$Prec., alternative = "stationary")
str(homogeneity_test)

# Safely extract results into a data frame
homogeneity_test_results <- data.frame(
  Test_Statistic = homogeneity_test$statistic,
  P_Value = homogeneity_test$p.value,
  Method = homogeneity_test$method,
  Alternative_Hypothesis = homogeneity_test$alternative,
  Critical_Values_1pct = ifelse(length(homogeneity_test$cval) >= 1, homogeneity_test$cval[1], NA),
  Critical_Values_5pct = ifelse(length(homogeneity_test$cval) >= 2, homogeneity_test$cval[2], NA),
  Critical_Values_10pct = ifelse(length(homogeneity_test$cval) >= 3, homogeneity_test$cval[3], NA)
)

# Change Point Analysis
change_point_analysis <- function(df, variable) {
  # Perform changepoint analysis on the specified variable using the PELT method
  cp <- cpt.meanvar(df[[variable]], method = "PELT")
  return(cp)
}

# Extract changepoint information function
extract_changepoint_info <- function(cpt_object) {
  # Extract the changepoint locations
  cpts <- cpt_object@cpts
  
  # Extract additional metadata (method, penalty, etc.)
  method <- cpt_object@method
  pen_value <- cpt_object@pen.value
  test_stat <- cpt_object@test.stat
  param_est <- cpt_object@param.est
  
  # Create a data frame summarizing the changepoint analysis
  changepoint_summary <- data.frame(
    Changepoint_Locations = paste(cpts, collapse = ", "),  # Concatenate locations
    Method = method,
    Penalty_Value = pen_value,
    Test_Statistic = test_stat,
    Parameter_Estimates = ifelse(length(param_est) > 0, paste(param_est, collapse = ", "), NA)
  )
  
  return(changepoint_summary)
}

# Parse changepoint summary function
parse_change_point_summary <- function(change_point_summary) {
  # Extract Changepoint_Locations as a numeric vector
  changepoint_locations <- as.numeric(unlist(strsplit(change_point_summary$Changepoint_Locations, ",")))
  
  # Extract and clean Parameter_Estimates
  param_estimates <- change_point_summary$Parameter_Estimates
  param_estimates_clean <- gsub('[c()"]', '', param_estimates)
  param_estimates_split <- strsplit(param_estimates_clean, ",")
  param_estimates_numeric <- as.numeric(unlist(param_estimates_split))
  
  # Assuming the parameters alternate, split into two separate vectors
  param_estimates1 <- param_estimates_numeric[seq(1, length(param_estimates_numeric), by = 2)]
  param_estimates2 <- param_estimates_numeric[seq(2, length(param_estimates_numeric), by = 2)]
  
  # Extract additional metadata
  method <- change_point_summary$Method
  penalty_value <- change_point_summary$Penalty_Value
  test_statistic <- change_point_summary$Test_Statistic
  
  # Combine into a data frame
  combined_data <- data.frame(
    Changepoint_Locations = changepoint_locations,
    Parameter_Estimates1 = param_estimates1,
    Parameter_Estimates2 = param_estimates2,
    Method = rep(method, length(changepoint_locations)),
    Penalty_Value = rep(penalty_value, length(changepoint_locations)),
    Test_Statistic = rep(test_statistic, length(changepoint_locations))
  )
  
  return(combined_data)
}
# Perform changepoint analysis on different variables
change_point_prec <- change_point_analysis(sample_station, "Prec.")
change_point_tmin <- change_point_analysis(sample_station, "Tmin")
change_point_tmax <- change_point_analysis(sample_station, "Tmax")

# Extract changepoint summaries
change_point_prec_summary <- extract_changepoint_info(change_point_prec)
change_point_tmin_summary <- extract_changepoint_info(change_point_tmin)
change_point_tmax_summary <- extract_changepoint_info(change_point_tmax)

# Parse changepoint summaries
clean_change_point_prec <- parse_change_point_summary(change_point_prec_summary)
clean_change_point_tmin <- parse_change_point_summary(change_point_tmin_summary)
clean_change_point_tmax <- parse_change_point_summary(change_point_tmax_summary)


# Climatological Year Analysis
climatological_analysis <- function(df, base_period, change_period1, change_period2) {
  # Add the 'Period' column
  df <- df %>%
    mutate(Period = case_when(
      Year %in% base_period ~ "Base Period",
      Year %in% change_period1 ~ "Climate Change Onset",
      Year %in% change_period2 ~ "Accelerated Climate Change",
      TRUE ~ "Other"
    ))
  
  # Perform trend analysis with safety checks for small groups
  trend_analysis <- df %>%
    group_by(Period) %>%
    summarise(
      Tmin_Trend = ifelse(n() >= 3, MannKendall(Tmin)$tau, NA),
      Tmax_Trend = ifelse(n() >= 3, MannKendall(Tmax)$tau, NA),
      Pre_Trend = ifelse(n() >= 3, MannKendall(Prec.)$tau, NA),
      Tmin_Sen_Slope = ifelse(n() >= 3, sens.slope(Tmin)$estimate, NA),
      Tmax_Sen_Slope = ifelse(n() >= 3, sens.slope(Tmax)$estimate, NA),
      Pre_Sen_Slope = ifelse(n() >= 3, sens.slope(Prec.)$estimate, NA)
    )
  
  return(trend_analysis)
}

# Define periods
base_period <- sample_station$Year[sample_station$Year >= 1960 & sample_station$Year <= 1989]
change_period1 <- sample_station$Year[sample_station$Year >= 1990 & sample_station$Year <= 2004]
change_period2 <- sample_station$Year[sample_station$Year >= 2005 & sample_station$Year <= 2018]

# Call the function
climate_analysis_results <- climatological_analysis(sample_station, base_period, change_period1, change_period2)

# Timeseries Plot for Base Period 
filtered_data_base_period <- sample_station %>%
  filter(as.numeric(Year) %in% base_period)

# Plot for Tmin
plot15 <- ggplot(filtered_data_base_period, aes(x = Year, y = Tmin)) +
  geom_line() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Base Period Time Series Plot of Tmin", x = "Year", y = "Tmin") +
  theme_minimal()
print(plot15)

# Plot for Tmax
plot16 <- ggplot(filtered_data_base_period, aes(x = Month, y = Tmax)) +
  geom_line() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Base Period Time Series Plot of Tmax", x = "Year", y = "Tmax") +
  theme_minimal()
print(plot16)

# Plot for Precipitation (Prec.)
plot17 <- ggplot(filtered_data_base_period, aes(x = Month, y = Prec.)) +
  geom_line() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Base Period Time Series Plot of Precipitation", x = "Year", y = "Prec.") +
  theme_minimal()
print(plot17)

# Timeseries plot for Climate chage onset
filtered_data_onset_period <- sample_station %>%
  filter(as.numeric(Year) %in% change_period1)
# Plot for Tmin
plot18 <- ggplot(filtered_data_onset_period, aes(x = Month, y = Tmin)) +
  geom_line() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Climate Change Onset Time Series Plot of Tmin", x = "Year", y = "Tmin") +
  theme_minimal()
print(plot18)

# Plot for Tmax
plot19 <- ggplot(filtered_data_onset_period, aes(x = Month, y = Tmax)) +
  geom_line() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Climate Change Onset Time Series Plot of Tmax", x = "Year", y = "Tmax") +
  theme_minimal()
print(plot19)

# Plot for Precipitation (Prec.)
plot20 <- ggplot(filtered_data_onset_period, aes(x = Month, y = Prec.)) +
  geom_line() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Climate Change Onset Time Series Plot of Precipitation", x = "Year", y = "Prec.") +
  theme_minimal()
print(plot20)

# Timeseries Plot for Base Period 
filtered_data_accelerated_period <- sample_station %>%
  filter(as.numeric(Year) %in% change_period2)
# Plot for Tmin
plot21 <- ggplot(filtered_data_accelerated_period, aes(x = Month, y = Tmin)) +
  geom_line() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Accelerated Climate Change Time Series Plot of Tmin", x = "Year", y = "Tmin") +
  theme_minimal()
print(plot21)

# Plot for Tmax
plot22 <- ggplot(filtered_data_accelerated_period, aes(x = Month, y = Tmax)) +
  geom_line() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Accelerated Climate Change Time Series Plot of Tmax", x = "Year", y = "Tmax") +
  theme_minimal()
print(plot22)

# Plot for Precipitation (Prec.)
plot23 <- ggplot(filtered_data_accelerated_period, aes(x = Month, y = Prec.)) +
  geom_line() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Accelerated Climate Change Time Series Plot of Precipitation", x = "Year", y = "Prec.") +
  theme_minimal()
print(plot23)



# Create the directory if it doesn't exist
dir.create(paste0("results/stations/", sheetstation), recursive = TRUE)

# List of plot objects
plot_list <- list(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12, plot13, plot14, plot15, plot16, plot17, plot18, plot19, plot20, plot21, plot22 ,plot23)

# Save each plot
for (i in seq_along(plot_list)) {
  ggsave(
    filename = paste0("results/stations/", sheetstation, "/plot", i, ".png"),
    plot = plot_list[[i]],  # Specify the plot to save
    width = 8, height = 6, dpi = 300  # Optional: Customize width, height, and resolution
  )
}

# Save data to Excel with multiple sheets
wb <- createWorkbook()
addWorksheet(wb, paste0(sheetstation, " Data"))
addWorksheet(wb, "Drought Cat")
addWorksheet(wb, "Chara_spi3")
addWorksheet(wb, "Chara_spi6")
addWorksheet(wb, "Chara_spi12")
addWorksheet(wb, "Chara_spei3")
addWorksheet(wb, "Chara_spei6")
addWorksheet(wb, "Chara_spei12")
addWorksheet(wb, "Trends")
addWorksheet(wb, "Drought_Total_Count")

addWorksheet(wb, "Homogeneity Test")
addWorksheet(wb, "Change Points Prec")
addWorksheet(wb, "Change Points Tmin")
addWorksheet(wb, "Change Points Tmax")
addWorksheet(wb, "Climatological Analysis")


# Write data to each sheet
writeData(wb, sheet = paste0(sheetstation, " Data"), sample_station)
writeData(wb, sheet = "Drought Cat", sp_cat, rowNames = TRUE)
writeData(wb, sheet = "Chara_spi3", Chara_spi3)
writeData(wb, sheet = "Chara_spi6", Chara_spi6)
writeData(wb, sheet = "Chara_spi12", Chara_spi12)
writeData(wb, sheet = "Chara_spei3", Chara_spei3)
writeData(wb, sheet = "Chara_spei6", Chara_spei6)
writeData(wb, sheet = "Chara_spei12", Chara_spei12)
writeData(wb, sheet = "Trends", trend_result)
writeData(wb, sheet = "Drought_Total_Count", drought_total_counts)

writeData(wb, sheet = "Homogeneity Test", homogeneity_test_results)
writeData(wb, sheet = "Change Points Prec", clean_change_point_prec)
writeData(wb, sheet = "Change Points Tmin", clean_change_point_tmin)
writeData(wb, sheet = "Change Points Tmax", clean_change_point_tmax)

writeData(wb, sheet = "Climatological Analysis", climate_analysis_results)

# Save the workbook
saveWorkbook(wb, file = paste0("results/stations/", sheetstation, "/", sheetstation, ".xlsx"), overwrite = TRUE)

